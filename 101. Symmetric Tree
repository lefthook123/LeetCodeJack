/*
101. Symmetric Tree

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3

But the following is not:
    1
   / \
  2   2
   \   \
   3    3

Note:
Bonus points if you could solve it both recursively and iteratively.
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */

 //recursive
public class Solution {
    public bool IsSymmetric(TreeNode root) {
        if(root==null)return true;
        return IsSymmetric(root.left,root.right);
    }
    
    public bool IsSymmetric(TreeNode left,TreeNode right) {
        if(left==null&&right==null)return true;
        if(left==null||right==null)return false;
        return IsSymmetric(left.left,right.right)&&IsSymmetric(left.right,right.left)&&left.val==right.val;
    }
}


//iterative
public class Solution {
    public bool IsSymmetric(TreeNode root) {
        if(root==null)return true;

        Stack<TreeNode> st = new Stack<TreeNode>();
        st.Push(root.left);
        st.Push(root.right);
        
        
        while(st.Count!=0){
            TreeNode right = st.Pop();
            TreeNode left = st.Pop();
            if(right==null&&left==null)continue;
            if(right==null||left==null)return false;
            if(right.val!=left.val)return false;
            st.Push(right.left);
            st.Push(left.right);
            st.Push(left.left);
            st.Push(right.right);
        }
        return true;
        
        
        
    }