165. Compare Version Numbers

Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 13.37


public class Solution {
    public int CompareVersion(string version1, string version2) {
        string[] strs1 = version1.Split('.');    
        string[] strs2 = version2.Split('.');  
        int i=0;
        while(i<strs1.Length||i<strs2.Length){
            int num1=i<strs1.Length?Convert.ToInt32(strs1[i]):0;
            int num2=i<strs2.Length?Convert.ToInt32(strs2[i]):0;
            if(num1>num2)return 1;if(num1<num2)return -1;
            i++;
        }
        return 0;
        
    }
}