188. Best Time to Buy and Sell Stock IV

Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).



public class Solution {
    public int MaxProfit(int k, int[] prices) {
        int len = prices.Length;
        if(len<2)return 0;
        if(k>=len-1){
           int sum=0;
           for(int i=1;i<len;i++){
               if(prices[i]>prices[i-1])sum+=(prices[i]-prices[i-1]);
               
           }return sum;
        }
        
        int[,] dp = new int[k+1,len];
        int max = -prices[0];
        //dp[0,i]: day i 0 transactions
        //dp[i,j]: max of dp[i-1,j-1]-prices[j-1]   dp[i-1,j-2]-prices[j-2]  (dp[i-1,j]-prices[j])
        for(int i=1;i<=k;i++){
            int temp = dp[i-1,i-1]-prices[i-1];
            for(int j=i;j<len;j++){
                dp[i,j]=Math.Max(temp+prices[j],dp[i,j-1]);
                max=Math.Max(dp[i,j],max);
                temp = Math.Max(temp,dp[i-1,j]-prices[j]);
            }
        }
        return max>0?max:0;
    }
}