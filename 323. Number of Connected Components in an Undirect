323. Number of Connected Components in an Undirected Graph

Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

Example 1:
     0          3
     |          |
     1 --- 2    4
Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], return 2.

Example 2:
     0           4
     |           |
     1 --- 2 --- 3
Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]], return 1.

Note:
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.



public class Solution {
    public int CountComponents(int n, int[,] edges) {
        
        List<HashSet<int>> lst = new List<HashSet<int>>();
        for(int i=0;i<n;i++)lst.Add(new HashSet<int>());
        for(int i=0;i<edges.GetLength(0);i++){
            lst[edges[i,0]].Add(edges[i,1]);lst[edges[i,1]].Add(edges[i,0]);
        }
        HashSet<int> visited = new HashSet<int>();
        int res = 0;
        for(int i=0;i<n;i++){
            if(!visited.Contains(i)){
                res++;
                dfs(lst,visited,i);
            }
                
        }
        return res;
    }
    
    public void dfs(List<HashSet<int>> lst,HashSet<int> visited,int num){
        if(visited.Contains(num))return;
        visited.Add(num);
        foreach(int nb in lst[num]){
            dfs(lst,visited,nb);
        }
    }
    
}