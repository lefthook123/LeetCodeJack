254. Factor Combinations

Numbers can be regarded as product of its factors. For example,

8 = 2 x 2 x 2;
  = 2 x 4.
Write a function that takes an integer n and return all possible combinations of its factors.

Note: 
Each combination's factors must be sorted ascending, for example: The factors of 2 and 6 is [2, 6], not [6, 2].
You may assume that n is always positive.
Factors should be greater than 1 and less than n.
Examples: 
input: 1
output: 
[]
input: 37
output: 
[]
input: 12
output:
[
  [2, 6],
  [2, 2, 3],
  [3, 4]
]
input: 32
output:
[
  [2, 16],
  [2, 2, 8],
  [2, 2, 2, 4],
  [2, 2, 2, 2, 2],
  [2, 4, 4],
  [4, 8]
]





public class Solution {
    public IList<IList<int>> GetFactors(int n) {
        List<int> factors = new List<int>();
        for(int i=2;i<n;i++){
            if(n%i==0)factors.Add(i);
        }
        IList<IList<int>> result = new List<IList<int>>();
        IList<int> temp = new List<int>();
        if(factors.Count==0)return result;
        GetFactors(result,factors,0,1,n,temp);
        return result;
    }
    
    public void GetFactors(IList<IList<int>> result,List<int> factors,int pos,int v,int n,IList<int> temp){
        if(v==n){
            result.Add(new List<int>(temp));return;
        }
        if(v>n||pos==factors.Count){
            return;
        }
        for(int i=pos;i<factors.Count;i++){
            temp.Add(factors[i]);
            GetFactors(result,factors,i,v*factors[i],n,temp);
            temp.RemoveAt(temp.Count-1);
        }
    }
}