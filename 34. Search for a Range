34. Search for a Range

Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].




public class Solution {
    public int[] SearchRange(int[] nums, int target) {
        
        //find left bound;
        
        int left=0,right=nums.Length-1,leftbound=-1,rightbound=-1;
        //find leftbound
        // move the right index towards left
        while(left<right){
            int mid = left+(right-left)/2;
            if(nums[mid]>=target){
                right=mid;
            }else{
                left=mid+1;
            }
        }
        if(nums[right]!=target)return new int[]{-1,-1};
        leftbound=right;left=right;right=nums.Length-1;
        //find rightbound
        //move left index towards right
        //mid is always >= target
        while(left<right){
            int mid = left+(right-left)/2;
            if(nums[mid]==target){
                left=mid+1;
            }else{
                right=mid-1;
            }
        }
        if(nums[left]==target){
            rightbound=left;
        }else{
            rightbound=left-1;
        }
        return new int[]{leftbound,rightbound};

    }
}