25. Reverse Nodes in k-Group

Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode ReverseKGroup(ListNode head, int k) {
        
        ListNode dummy=new ListNode(-1);
        dummy.next=head;
        ListNode prev = dummy;
        ListNode n1 = head;
        ListNode curr = dummy;
        ListNode next = null;
        ListNode n2 = null;
        while(n1!=null){
            
            for(int i=0;i<k;i++){
                curr=curr.next;
                if(curr==null)return dummy.next;
            }
            n2=curr;
            next=curr.next;
            reverse(prev,n1,n2,next);
            prev=n1;
            curr=n1;
            n1=next;
            
        }
        
        return dummy.next;
    }
    
    
    
    public void reverse(ListNode prev,ListNode n1,ListNode n2,ListNode next){
        
        ListNode curr = n1;
        ListNode tempprev = prev;
        while(curr!=next){
            ListNode tempnext=curr.next;
            curr.next=tempprev;
            tempprev=curr;
            curr=tempnext;
        }
        prev.next=n2;
        n1.next=next;
        
    }
    
}