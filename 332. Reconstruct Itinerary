332. Reconstruct Itinerary

Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.

Note:
If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary ["JFK", "LGA"] has a smaller lexical order than ["JFK", "LGB"].
All airports are represented by three capital letters (IATA code).
You may assume all tickets form at least one valid itinerary.
Example 1:
tickets = [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
Return ["JFK", "MUC", "LHR", "SFO", "SJC"].
Example 2:
tickets = [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Return ["JFK","ATL","JFK","SFO","ATL","SFO"].
Another possible reconstruction is ["JFK","SFO","ATL","JFK","ATL","SFO"]. But it is larger in lexical order.



public class Solution {
    public IList<string> FindItinerary(string[,] tickets) {
        
        //key: destination //value: source   BFS
        //key: source //value: destination   DFS
        Dictionary<string,List<string>> adjlst = new Dictionary<string,List<string>>();
        for(int i=0;i<tickets.GetLength(0);i++){
            if(!adjlst.ContainsKey(tickets[i,0])){
                adjlst[tickets[i,0]]=new List<string>();
            }
            adjlst[tickets[i,0]].Add(tickets[i,1]);
        }
        int countOfTickets = tickets.GetLength(0);
        
        foreach(var item in adjlst){
            item.Value.Sort();
        }
        
        
        List<string> result = new List<string>();
        result.Add("JFK");
        dfs(result,adjlst,"JFK",countOfTickets);
        return result;
    }
    
    
    
    public bool dfs(List<string> result,Dictionary<string,List<string>> adjlst,string curr,int count){
        if(count==0)return true;
        if(!adjlst.ContainsKey(curr)||adjlst[curr].Count==0)return false;
        
        List<string> destinations = adjlst[curr].ToList();
        
        foreach(string desti in destinations){
            
            result.Add(desti);
            adjlst[curr].Remove(desti);
            bool ret = dfs(result,adjlst,desti,count-1);
            if(ret)return true;
            result.RemoveAt(result.Count-1);
            adjlst[curr].Add(desti);
        }
        return false;
    }
}