98. Validate Binary Search Tree

Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsValidBST(TreeNode root) {
        if(root==null)return true;
        int[] args= new int[2];
        
        return IsValidBST(root,args);
    }
    //args[0]: min
    //args[1]: max
    public bool IsValidBST(TreeNode root,int[] args) {
        int min = root.val;
        int max = root.val;
        if(root.left!=null){
            if(!IsValidBST(root.left,args))return false;
            if(root.val<=args[1])return false;
            min = args[0];
        }
        if(root.right!=null){
            if(!IsValidBST(root.right,args))return false;
            if(root.val>=args[0])return false;
            max = args[1];
        }
        args[0]=min;args[1]=max;
        return true;
    }
}





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsValidBST(TreeNode root) {
        Stack<TreeNode> st = new Stack<TreeNode>();
        if(root==null)return true;
        while(root!=null){
            st.Push(root);root=root.left;
        }
        bool isFirst = true;
        int prev = 0;
        while(st.Count>0){
            
            TreeNode curr = st.Pop();
            if(isFirst){
                prev = curr.val;isFirst=false;
            }else{
                if(curr.val<=prev)return false;
                prev=curr.val;
            }
            curr = curr.right;
            while(curr!=null){
                st.Push(curr);
                curr=curr.left;
            }
        }return true;
   
    }
    //args[0]: min
    //args[1]: max
    public bool IsValidBST(TreeNode root,int[] args) {
        int min = root.val;
        int max = root.val;
        if(root.left!=null){
            if(!IsValidBST(root.left,args))return false;
            if(root.val<=args[1])return false;
            min = args[0];
        }
        if(root.right!=null){
            if(!IsValidBST(root.right,args))return false;
            if(root.val>=args[0])return false;
            max = args[1];
        }
        args[0]=min;args[1]=max;
        return true;
    }
}