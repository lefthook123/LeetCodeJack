133. Clone Graph

Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.


OJ's undirected graph serialization:
Nodes are labeled uniquely.

We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.

The graph has a total of three nodes, and therefore contains three parts as separated by #.

First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
Second node is labeled as 1. Connect node 1 to node 2.
Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:

       1
      / \
     /   \
    0 --- 2
         / \
         \_/




/**
 * Definition for undirected graph.
 * public class UndirectedGraphNode {
 *     public int label;
 *     public IList<UndirectedGraphNode> neighbors;
 *     public UndirectedGraphNode(int x) { label = x; neighbors = new List<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    public UndirectedGraphNode CloneGraph(UndirectedGraphNode node) {
        if(node==null)return null;
        //stores cloned nodes
        Dictionary<int,UndirectedGraphNode> dict = new Dictionary<int,UndirectedGraphNode>();
        
        //clone node before push into stack
        //stores original nodes
        Stack<UndirectedGraphNode> st = new Stack<UndirectedGraphNode>();
        
        UndirectedGraphNode clonedroot = new UndirectedGraphNode(node.label);
        dict[node.label]=clonedroot;
        st.Push(node);
        
        while(st.Count>0){
            UndirectedGraphNode n = st.Pop();
            dict[n.label].neighbors = new List<UndirectedGraphNode>();
            foreach(UndirectedGraphNode c in n.neighbors){
                //which means the original nodes hasn't been pushed into stack before
                if(!dict.ContainsKey(c.label)){
                    UndirectedGraphNode cc = new UndirectedGraphNode(c.label);
                    dict[c.label]=cc;
                    st.Push(c);
                }
                dict[n.label].neighbors.Add(dict[c.label]);
            }
        }
        return clonedroot;
        
        
        
    }
}