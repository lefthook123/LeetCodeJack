310. Minimum Height Trees

For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.

Format
The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).

You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.

Example 1:

Given n = 4, edges = [[1, 0], [1, 2], [1, 3]]

        0
        |
        1
       / \
      2   3
return [1]

Example 2:

Given n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]

     0  1  2
      \ | /
        3
        |
        4
        |
        5
return [3, 4]





public class Solution {
    public IList<int> FindMinHeightTrees(int n, int[,] edges) {
        
        List<HashSet<int>> adjlst = new List<HashSet<int>>();
        HashSet<int> nodesht = new HashSet<int>(); 
        for(int i=0;i<n;i++){
            adjlst.Add(new HashSet<int>());
            nodesht.Add(i);
        }
        for(int i=0;i<edges.GetLength(0);i++){
            adjlst[edges[i,0]].Add(edges[i,1]);
            adjlst[edges[i,1]].Add(edges[i,0]);
        }
        
        Queue<int> q = new Queue<int>();
        for(int i=0;i<n;i++){
            if(adjlst[i].Count==1){
                q.Enqueue(i);
            }
        }
        
        while(nodesht.Count>2){
            int size = q.Count;
            for(int i=0;i<size;i++){
                int node = q.Dequeue();
                nodesht.Remove(node);
                HashSet<int> neighbours = adjlst[node];
                int nb = neighbours.First();
                adjlst[nb].Remove(node);
                if(adjlst[nb].Count==1)q.Enqueue(nb);
            }
        }
        
        int[] result = new int[nodesht.Count];
        int pos = 0;
        foreach(var item in nodesht){
            result[pos++]=item;
        }
        return result;
    }
}
