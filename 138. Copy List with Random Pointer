138. Copy List with Random Pointer

A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.


/**
 * Definition for singly-linked list with a random pointer.
 * public class RandomListNode {
 *     public int label;
 *     public RandomListNode next, random;
 *     public RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode CopyRandomList(RandomListNode head) {
        if(head==null)return head;
        Dictionary<RandomListNode,RandomListNode> dict = new Dictionary<RandomListNode,RandomListNode>();
        RandomListNode copyhead = new RandomListNode(head.label);
        dict[head]=copyhead;
        
        while(head!=null){
            if(head.next!=null){
                if(!dict.ContainsKey(head.next)){
                    dict[head.next] = new RandomListNode(head.next.label);
                }
                dict[head].next=dict[head.next];
            }
            if(head.random!=null){
                if(!dict.ContainsKey(head.random)){
                    dict[head.random] = new RandomListNode(head.random.label);
                }
                dict[head].random=dict[head.random];
            }
            head=head.next;
        }
        return copyhead;
        
    }
}