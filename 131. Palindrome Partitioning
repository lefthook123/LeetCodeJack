131. Palindrome Partitioning

Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

  [
    ["aa","b"],
    ["a","a","b"]
  ]



  public class Solution {
    public IList<IList<string>> Partition(string s) {
        
        bool[,] dp=new bool[s.Length,s.Length];
        //dp[i,j]: from index i to index j is a palindrome
        
        for(int diff = 0;diff<s.Length;diff++){
            for(int i=0;i<s.Length-diff;i++){
                int j=i+diff;
                if(diff==0)dp[i,j]=true;
                else if(diff==1)dp[i,j]=s[i]==s[j];
                else{
                    dp[i,j]=dp[i+1,j-1]&&s[i]==s[j];
                }
            }
        }
        IList<IList<string>> result = new List<IList<string>>();
        IList<string> temp = new List<string>();
        dfs(result,temp,dp,0,s);
        return result;
    }
    
    public void dfs(IList<IList<string>> result,IList<string> temp,bool[,] dp,int curr,string s){
        
        if(curr==s.Length){
            result.Add(new List<string>(temp));return;
        }
        //find a palindrom start from curr
        for(int i=curr;i<s.Length;i++){
            if(dp[curr,i]){
                temp.Add(s.Substring(curr,i-curr+1));
                dfs(result,temp,dp,i+1,s);
                temp.RemoveAt(temp.Count-1);
            }
        }
    }
}