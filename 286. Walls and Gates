286. Walls and Gates


You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

For example, given the 2D grid:
INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:
  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
Show Company Tags
Show Tags
Show Similar Problems



public class Solution {
    public void WallsAndGates(int[,] rooms) {
        int max = Int32.MaxValue;
        int row = rooms.GetLength(0);
        int col = rooms.GetLength(1);
        Queue<int> q = new Queue<int>();
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(rooms[i,j]==0){
                    q.Enqueue(i*col+j);
                }
            }
        }
        int distance = 0;
        while(q.Count>0){
            distance++;
            int size = q.Count;
            for(int i=0;i<size;i++){
                int pos = q.Dequeue();
                int pi = pos/col;
                int pj = pos%col;
                if(pi>0&&rooms[pi-1,pj]==max){
                    rooms[pi-1,pj]=distance;
                    q.Enqueue((pi-1)*col+pj);
                }
                if(pi<row-1&&rooms[pi+1,pj]==max){
                    rooms[pi+1,pj]=distance;
                    q.Enqueue((pi+1)*col+pj);
                }
                if(pj>0&&rooms[pi,pj-1]==max){
                    rooms[pi,pj-1]=distance;
                    q.Enqueue(pi*col+pj-1);
                }
                if(pj<col-1&&rooms[pi,pj+1]==max){
                    rooms[pi,pj+1]=distance;
                    q.Enqueue(pi*col+pj+1);
                }
            }
        }
    }
}
