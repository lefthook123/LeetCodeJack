212. Word Search II


Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

For example,
Given words = ["oath","pea","eat","rain"] and board =

[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
Return ["eat","oath"].
Note:
You may assume that all inputs are consist of lowercase letters a-z.


public class Solution {
    public IList<string> FindWords(char[,] board, string[] words) {
        List<string> result = new List<string>();
        Trie t = new Trie();
        TrieNode root = t.root;
        for(int i=0;i<words.Length;i++){
            t.Insert(words[i]);
        }
        for(int i=0;i<board.GetLength(0);i++){
            for(int j=0;j<board.GetLength(1);j++){
                if(root.dict.ContainsKey(board[i,j])){
                    char c = board[i,j];
                    board[i,j]='#';
                    dfs(board,i,j,root.dict[c],result);
                    board[i,j]=c;
                }
            }
        }
        return result;
    }
    
    
    public void dfs(char[,] board,int i,int j,TrieNode tn,List<string> result){
        
        if(tn.word!=""){
            result.Add(tn.word);tn.word="";
        }
        
        if(tn.dict.Count==0)return;
        
        if(i>0&&tn.dict.ContainsKey(board[i-1,j])){
            char c = board[i-1,j];
            board[i-1,j]='#';
            dfs(board,i-1,j,tn.dict[c],result);
            board[i-1,j]=c;
        }
        if(i<board.GetLength(0)-1&&tn.dict.ContainsKey(board[i+1,j])){
            char c = board[i+1,j];
            board[i+1,j]='#';
            dfs(board,i+1,j,tn.dict[c],result);
            board[i+1,j]=c;
        }
        if(j>0&&tn.dict.ContainsKey(board[i,j-1])){
            char c = board[i,j-1];
            board[i,j-1]='#';
            dfs(board,i,j-1,tn.dict[c],result);
            board[i,j-1]=c;
        }
        if(j<board.GetLength(1)-1&&tn.dict.ContainsKey(board[i,j+1])){
            char c = board[i,j+1];
            board[i,j+1]='#';
            dfs(board,i,j+1,tn.dict[c],result);
            board[i,j+1]=c;
        }
        
    }
    
    public class TrieNode{
        public string word{get;set;}
        public Dictionary<char,TrieNode> dict{get;set;}
        public TrieNode(){
            word="";dict=new Dictionary<char,TrieNode>();
        }
    }
    public class Trie{
        
        public TrieNode root{get;set;}
        public Trie(){
            root=new TrieNode();
        }
        public void Insert(string word){
            TrieNode curr=root;
            for(int i=0;i<word.Length;i++){
                if(!curr.dict.ContainsKey(word[i])){
                    curr.dict[word[i]]=new TrieNode();
                }
                curr=curr.dict[word[i]];
            }
            curr.word=word;
        }
    }
}
