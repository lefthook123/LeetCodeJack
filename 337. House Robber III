337. House Robber III

The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:
     3
    / \
   2   3
    \   \ 
     3   1
Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
Example 2:
     3
    / \
   4   5
  / \   \ 
 1   3   1
Maximum amount of money the thief can rob = 4 + 5 = 9.



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int Rob(TreeNode root) {
        if(root==null)return 0;
        int[] args=new int[2];
        Rob(root,args);
        return args[0];
    }
    
    
    //args[0]: the max value if we include the root value
    //args[1]: the max value if we don't include the root value
    public void Rob(TreeNode root,int[] args) {
        if(root.left==null&&root.right==null){
            args[0]=root.val;args[1]=0;return;
        }
        int maxleft1 = 0;
        int maxleft2 = 0;
        int maxright1 = 0;
        int maxright2 = 0;
        
        if(root.left!=null){
            Rob(root.left,args);
            maxleft1=args[0];
            maxleft2=args[1];
        }
        if(root.right!=null){
            Rob(root.right,args);
            maxright1=args[0];
            maxright2=args[1];
        }
        
        args[1]=Math.Max(maxleft1,maxleft2)+Math.Max(maxright1,maxright2);
        args[0]=Math.Max(maxleft2+maxright2+root.val,args[1]);
        
    }
}

