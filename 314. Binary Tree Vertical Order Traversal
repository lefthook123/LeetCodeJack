314. Binary Tree Vertical Order Traversal

Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.

Examples:

Given binary tree [3,9,20,null,null,15,7],
   3
  /\
 /  \
 9  20
    /\
   /  \
  15   7
return its vertical order traversal as:
[
  [9],
  [3,15],
  [20],
  [7]
]
Given binary tree [3,9,8,4,0,1,7],
     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7
return its vertical order traversal as:
[
  [4],
  [9],
  [3,0,1],
  [8],
  [7]
]
Given binary tree [3,9,8,4,0,1,7,null,null,null,2,5] (0's right child is 2 and 1's left child is 5),
     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7
    /\
   /  \
   5   2
return its vertical order traversal as:
[
  [4],
  [9,5],
  [3,0,1],
  [8,2],
  [7]
]




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public IList<IList<int>> VerticalOrder(TreeNode root) {
        //in order 
        IList<IList<int>> result = new List<IList<int>>();
        if(root==null)return result;
        Dictionary<int,List<int>> dict = new Dictionary<int,List<int>>();
        
        int min=0;
        int max=0;
        Queue<TreeNode> st = new Queue<TreeNode>();
        Queue<int> stval = new Queue<int>();
        
        st.Enqueue(root);stval.Enqueue(0);
        
        
        while(st.Count>0){
            
            TreeNode tn = st.Dequeue();
            int v = stval.Dequeue();
            min=Math.Min(v,min);max=Math.Max(max,v);
            if(!dict.ContainsKey(v)){
                dict[v]=new List<int>();
            }
            dict[v].Add(tn.val);
            
            if(tn.left!=null){
                st.Enqueue(tn.left);
                stval.Enqueue(v-1);
            }
            if(tn.right!=null){
                st.Enqueue(tn.right);
                stval.Enqueue(v+1);
            }
        }
        
        for(int i=min;i<=max;i++){
            List<int> lst = dict[i];
            result.Add(lst);
        }
        return result;
        
                
    }
    

    
    
    
}