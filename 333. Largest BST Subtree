333. Largest BST Subtree

Given a binary tree, find the largest subtree which is a Binary Search Tree (BST), where largest means subtree with largest number of nodes in it.

Note:
A subtree must include all of its descendants.
Here's an example:
    10
    / \
   5  15
  / \   \ 
 1   8   7
The Largest BST Subtree in this case is the highlighted one. 
The return value is the subtree's size, which is 3.



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    //private int max=0;
    
    public int LargestBSTSubtree(TreeNode root) {
        int[] args = new int[4];
        if(root==null)return 0;
        isBST(root,args);
        return args[3];
    }
    
    //args[0]: min of bst
    //args[1]: max of bst
    //args[2]: size of bst
    //args[3]; max of all
    public bool isBST(TreeNode root,int[] args){
        int size = 1;
        int min = root.val;
        int max = root.val;
        bool ret = true;
        if(root.left!=null){
            if(!isBST(root.left,args))ret=false;
            if(root.val<=args[1])ret=false;
            size+=args[2];
            min = args[0];
        }
        if(root.right!=null){
            if(!isBST(root.right,args))ret=false;
            if(root.val>=args[0])ret=false;
            size+=args[2];
            max=args[1];
        }
        if(!ret)return false;
        args[0]=min;args[1]=max;args[2]=size;
        args[3]=Math.Max(args[3],args[2]);
        return true;
    }
}