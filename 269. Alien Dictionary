269. Alien Dictionary

There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

For example,
Given the following words in dictionary,

[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
]
The correct order is: "wertf".

Note:
You may assume all letters are in lowercase.
If the order is invalid, return an empty string.
There may be multiple valid order of letters, return any one of them is fine.


public class Solution {
    public string AlienOrder(string[] words) {
        Dictionary<char,HashSet<char>> dict = new Dictionary<char,HashSet<char>>();
        //0: unvisited, 1: visited, 2: visited in the current cycle
        Dictionary<char,int> helper = new Dictionary<char,int>();
        for(int i=0;i<words.Length;i++){
            for(int j=0;j<words[i].Length;j++){
                helper[words[i][j]]=0;
                if(!dict.ContainsKey(words[i][j])){
                    dict.Add(words[i][j],new HashSet<char>());
                }
            }
        }
        for(int i=0;i<words.Length-1;i++){
            getEdge(words[i],words[i+1],dict);
        }
        char[] arr = new char[helper.Count];
        int pos = helper.Count-1;
        foreach(var item in dict){
            if(!topologicalSort(item.Key,arr,dict,helper,ref pos))return "";
        }
        return new string(arr);
    }
    public bool topologicalSort(char curr, char[] arr, Dictionary<char,HashSet<char>> dict, Dictionary<char,int> helper, ref int pos){
        if(helper[curr]==2)return false;
        if(helper[curr]==1)return true;
        //unvisited
        
        helper[curr] = 2;
        foreach(var item in dict[curr]){
            if(!topologicalSort(item,arr,dict,helper,ref pos))return false;
        }
        helper[curr] = 1;
        arr[pos--]=curr;
        return true;
    }
    //s1 appear before s2
    public bool getEdge(string s1,string s2,Dictionary<char,HashSet<char>> dict){
        int len1 = s1.Length;
        int len2=  s2.Length;
        int i=0;
        while(i<len1&&i<len2){
            if(s1[i]==s2[i]){
                i++;
            }
            else{
                dict[s1[i]].Add(s2[i]);
                return true;
            }
        }
        return i==len1;
    }
}