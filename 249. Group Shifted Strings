249. Group Shifted Strings

Given a string, we can "shift" each of its letter to its successive letter, for example: "abc" -> "bcd". We can keep "shifting" which forms the sequence:

"abc" -> "bcd" -> ... -> "xyz"
Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.

For example, given: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"], 
Return:

[
  ["abc","bcd","xyz"],
  ["az","ba"],
  ["acef"],
  ["a","z"]
]



public class Solution {
    public IList<IList<string>> GroupStrings(string[] strings) {
        Dictionary<string,List<string>> dict = new Dictionary<string,List<string>>();
        Array.Sort(strings);
        for(int i=0;i<strings.Length;i++){
            string key = "";
            for(int j=1;j<strings[i].Length;j++){
                int diff = strings[i][j]-strings[i][j-1];
                if(diff<0)diff+=26;
                key+=diff.ToString();
            }
            if(!dict.ContainsKey(key)){
                dict[key]=new List<string>{strings[i]};
            }else{
                dict[key].Add(strings[i]);
            }
        }
        IList<IList<string>> result = new List<IList<string>>();
        foreach(var item in dict){
            result.Add(item.Value);
        }
        return result;
    }
}