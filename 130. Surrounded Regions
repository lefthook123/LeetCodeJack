130. Surrounded Regions

Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X



public class Solution {
    public void Solve(char[,] board) {
        int row = board.GetLength(0);
        int col = board.GetLength(1);
        
        for(int i=0;i<row;i++){
            if(board[i,0]=='O'){
                color(i,0,board,row,col);
            }
            if(board[i,col-1]=='O'){
                color(i,col-1,board,row,col);
            }
        }
        for(int i=1;i<col-1;i++){
            if(board[0,i]=='O'){
                color(0,i,board,row,col);
            }
            if(board[row-1,i]=='O'){
                color(row-1,i,board,row,col);
            }
        }
        
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(board[i,j]=='O'){
                    board[i,j]='X';
                }
                else if(board[i,j]=='Y'){
                    board[i,j]='O';
                }
            }
        }
        
    }
    
    //board[i,j]='O'
    public void color(int i,int j,char[,] board,int row,int col){
        
        Queue<int> q = new Queue<int>();
        
        
        q.Enqueue(i*col+j);
        board[i,j]='Y';
        while(q.Count>0){
            int pos = q.Dequeue();
            int pi = pos/col;
            int pj = pos%col;
            
            if(pi>0&&board[pi-1,pj]=='O'){
                q.Enqueue((pi-1)*col+pj);
                board[pi-1,pj]='Y';
            }
            if(pi<row-1&&board[pi+1,pj]=='O'){
                q.Enqueue((pi+1)*col+pj);
                board[pi+1,pj]='Y';
            }
            if(pj>0&&board[pi,pj-1]=='O'){
                q.Enqueue(pi*col+pj-1);
                board[pi,pj-1]='Y';
            }
            if(pj<col-1&&board[pi,pj+1]=='O'){
                q.Enqueue(pi*col+pj+1);
                board[pi,pj+1]='Y';
            }
            
        }
    }
    
    
    
}