/*
232. Implement Queue using Stacks

Implement the following operations of a queue using stacks.

push(x) -- Push element x to the back of queue.
pop() -- Removes the element from in front of queue.
peek() -- Get the front element.
empty() -- Return whether the queue is empty.
Notes:
You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.
Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.
You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).
*/


public class Queue {
    
    Stack<int> st1 = new Stack<int>();
    Stack<int> st2 = new Stack<int>();
    
    // Push element x to the back of queue.
    //O(1) time
    public void Push(int x) {
        st1.Push(x);
    }

    // Removes the element from front of queue.
    public void Pop() {
        if(st2.Count==0){
            while(st1.Count>0){
                st2.Push(st1.Pop());
            }
        }
        try{
            st2.Pop();
        }catch(Exception ex){
            
        }
    }

    // Get the front element.
    public int Peek() {
        if(st2.Count==0){
            while(st1.Count>0){
                st2.Push(st1.Pop());
            }
        }
        try{
            return st2.Peek();
        }catch(Exception ex){
            return -1;
        }
    }

    // Return whether the queue is empty.
    public bool Empty() {
        return st1.Count==0&&st2.Count==0;
    }
}