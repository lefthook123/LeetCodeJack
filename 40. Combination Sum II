40. Combination Sum II


Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
A solution set is: 
[1, 7] 
[1, 2, 5] 
[2, 6] 
[1, 1, 6] 



public class Solution {
    public IList<IList<int>> CombinationSum2(int[] candidates, int target) {
        IList<IList<int>> result = new List<IList<int>>();
        IList<int> temp = new List<int>();
        
        Array.Sort(candidates);
        
        bt(result,temp,candidates,target,0,0);
        return result;
    }
    
    
    public void bt(IList<IList<int>> result,IList<int> temp,int[] candidates,int target,int sum,int curr){
        if(sum>target)return;
        if(sum==target){
            result.Add(new List<int>(temp));
        }
        for(int i=curr;i<candidates.Length;i++){
            if(i==curr||candidates[i]!=candidates[i-1]){
                temp.Add(candidates[i]);
                bt(result,temp,candidates,target,sum+candidates[i],i+1);
                temp.RemoveAt(temp.Count-1);
            }
            
        }
    }
}