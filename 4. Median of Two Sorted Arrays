4. Median of Two Sorted Arrays

There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

public class Solution {
    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {
        
        int len1= nums1.Length;
        int len2 = nums2.Length;
        if((len1+len2)%2==0){
            return (FindKthLargestElement(nums1,nums2,(len1+len2)/2)+FindKthLargestElement(nums1,nums2,(len1+len2)/2+1))/2;
        }else{
            return FindKthLargestElement(nums1,nums2,(len1+len2)/2+1);
        }
        
    }
    
    public double FindKthLargestElement(int[] nums1,int[] nums2,int k){
        int l1 = 0;
        int l2 = 0;
        int r1 = nums1.Length-1;
        int r2 = nums2.Length-1;
        
        while(l1<=r1&&l2<=r2){
            int m1 = l1+(r1-l1)/2;
            int m2 = l2+(r2-l2)/2;
            if(nums1[m1]<nums2[m2]){
                if(k<=m1+m2-l1-l2+1){
                    r2=m2-1;
                }else{
                    k-=(m1-l1+1);
                    l1=m1+1;
                    
                }
            }else if(nums1[m1]>nums2[m2]){
                if(k<=m1+m2-l1-l2+1){
                    r1=m1-1;
                }else{
                    k-=(m2-l2+1);
                    l2=m2+1;
                    
                }
            }else{
                if(k==m1+m2-l1-l2+1||k==m1+m2-l1-l2+2){
                    return Convert.ToDouble(nums1[m1]);
                }else if(k<m1+m2-l1-l2+1){
                    r1=m1-1;
                    r2=m2-1;
                }else{
                    
                    k-=(m1+m2-l1-l2+2);
                    l1=m1+1;
                    l2=m2+1;
                }
            }
        }
        if(l1>r1){
            return Convert.ToDouble(nums2[l2+k-1]);
        }else{
            return Convert.ToDouble(nums1[l1+k-1]);
        }
        
    }
}