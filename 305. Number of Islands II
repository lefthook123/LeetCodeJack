305. Number of Islands II


A 2d grid map of m rows and n columns is initially filled with water. We may perform an addLand operation which turns the water at position (row, col) into a land. Given a list of positions to operate, count the number of islands after each addLand operation. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example:

Given m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]].
Initially, the 2d grid grid is filled with water. (Assume 0 represents water and 1 represents land).

0 0 0
0 0 0
0 0 0
Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land.

1 0 0
0 0 0   Number of islands = 1
0 0 0
Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land.

1 1 0
0 0 0   Number of islands = 1
0 0 0
Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land.

1 1 0
0 0 1   Number of islands = 2
0 0 0
Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land.

1 1 0
0 0 1   Number of islands = 3
0 1 0
We return the result as an array: [1, 1, 2, 3]

Challenge:

Can you do it in time complexity O(k log mn), where k is the length of the positions?



public class Solution {
    public IList<int> NumIslands2(int m, int n, int[,] positions) {
        
        DisjointSet ds = new DisjointSet();
        
        IList<int> res = new List<int>();
        
        
        for(int i=0;i<positions.GetLength(0);i++){
            int p = positions[i,0];
            int q = positions[i,1];
            int pos = p*n+q;
            ds.makeSet(pos);
            
            
            if(p>0&&ds.dict.ContainsKey((p-1)*n+q)){
                ds.Union((p-1)*n+q,pos);
            }
            if(p<m-1&&ds.dict.ContainsKey((p+1)*n+q)){
                ds.Union((p+1)*n+q,pos);
            }
            if(q>0&&ds.dict.ContainsKey((p)*n+q-1)){
                ds.Union((p)*n+q-1,pos);
            }
            if(q<n-1&&ds.dict.ContainsKey((p)*n+q+1)){
                ds.Union((p)*n+q+1,pos);
            }
            res.Add(ds.NumOfSet);
        }
        return res;
        
        
        
        
    }
    public class DisjointSet{
        public class Node{
            public int rank{get;set;}
            public int data{get;set;}
            public Node parent{get;set;}
            public Node(int v){
                rank=0;parent=this;data=v;
            }
        }
        public Dictionary<int,Node> dict{get;set;}
        public int NumOfSet{get;set;}
        public DisjointSet(){
            dict = new Dictionary<int,Node>();
            NumOfSet=0;
        }
        
        public void makeSet(int v){
            if(dict.ContainsKey(v))return;
            Node n = new Node(v);
            dict[v]=n;
            NumOfSet++;
        }
        public Node findSet(Node n){
            if(n.parent==n)return n;
            n.parent=findSet(n.parent);
            return n.parent;
        }
        public int findSet(int v){
            //if(!dict.ContainsKey(v))return -1;
            return findSet(dict[v]).data;
        }
        public void Union(int v1,int v2){
            Node n1 = dict[v1];
            Node n2 = dict[v2];
            Node p1 = findSet(n1);
            Node p2 = findSet(n2);
            if(p1==p2)return;
            NumOfSet--;
            if(p1.rank>=p2.rank){
                if(p1.rank==p2.rank){
                    p1.rank++;
                }
                p2.parent=p1;
            }else{
                p1.parent=p2;
            }
        }
    }
}