281. Zigzag Iterator


Given two 1d vectors, implement an iterator to return their elements alternately.

For example, given two 1d vectors:

v1 = [1, 2]
v2 = [3, 4, 5, 6]
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 3, 2, 4, 5, 6].

Follow up: What if you are given k 1d vectors? How well can your code be extended to such cases?

Clarification for the follow up question - Update (2015-09-18):
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace "Zigzag" with "Cyclic". For example, given the following input:

[1,2,3]
[4,5,6,7]
[8,9]
It should return [1,4,8,2,5,9,3,6,7].




public class ZigzagIterator {
    
    List<int> lst = new List<int>();
    int pos = 0;
    public ZigzagIterator(IList<int> v1, IList<int> v2) {
        
        int i=0;
        
        while(i<v1.Count||i<v2.Count){
            
            if(i<v1.Count)lst.Add(v1[i]);
            if(i<v2.Count)lst.Add(v2[i]);
            i++;
        }
        
    }

    public bool HasNext() {
        return pos!=lst.Count;
    }

    public int Next() {
        if(HasNext()){
            return lst[pos++];
        }
        return -1;
    }
}

/**
 * Your ZigzagIterator will be called like this:
 * ZigzagIterator i = new ZigzagIterator(v1, v2);
 * while (i.HasNext()) v[f()] = i.Next();
 */