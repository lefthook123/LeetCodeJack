208. Implement Trie (Prefix Tree)

Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.

class TrieNode {
    public Dictionary<char,TrieNode> dict{get;set;}
    public bool isLeaf{get;set;}
    // Initialize your data structure here.
    public TrieNode(){
        dict = new Dictionary<char,TrieNode>();isLeaf=false;
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
        
    }

    // Inserts a word into the trie.
    public void Insert(String word) {
        TrieNode curr = root;
        for(int i=0;i<word.Length;i++){
            if(curr.dict.ContainsKey(word[i])){
                curr=curr.dict[word[i]];
            }else{
                TrieNode tn = new TrieNode();
                curr.dict[word[i]]=tn;
                curr=tn;
            }
        }
        curr.isLeaf=true;
        
    }

    // Returns if the word is in the trie.
    public bool Search(string word) {
        TrieNode curr = root;
        for(int i=0;i<word.Length;i++){
            if(curr.dict.ContainsKey(word[i])){
                curr=curr.dict[word[i]];
            }else{
                return false;
            }
        }
        return curr.isLeaf;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    public bool StartsWith(string word) {
        TrieNode curr = root;
        for(int i=0;i<word.Length;i++){
            if(curr.dict.ContainsKey(word[i])){
                curr=curr.dict[word[i]];
            }else{
                return false;
            }
        }
        return true;
    }
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.Insert("somestring");
// trie.Search("key");