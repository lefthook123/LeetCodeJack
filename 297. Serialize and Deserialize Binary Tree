297. Serialize and Deserialize Binary Tree


Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
        if(root==null)return "#";
        return root.val.ToString()+","+serialize(root.left)+","+serialize(root.right);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {
        string[] strs = data.Split(',');
        int pos = 0;
        return dfs(strs,ref pos);
        
    }
    
    public TreeNode dfs(string[] strs, ref int pos){
        if(strs[pos]=="#"){
            pos++;
            return null;
        }
        TreeNode root = new TreeNode(Convert.ToInt32(strs[pos++]));
        root.left = dfs(strs,ref pos);
        root.right = dfs(strs,ref pos);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));






/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
        if(root==null)return "";
        Queue<TreeNode> q = new Queue<TreeNode>();
        q.Enqueue(root);
        StringBuilder sb = new StringBuilder();
        
        while(q.Count>0){
            int size = q.Count;
            for(int i=0;i<size;i++){
                TreeNode tn = q.Dequeue();
                if(sb.Length!=0){
                    sb.Append(",");
                }
                if(tn!=null){
                    sb.Append(tn.val);
                    q.Enqueue(tn.left);
                    q.Enqueue(tn.right);
                }else{
                    sb.Append('\0');
                }
                
            }
        }
        return sb.ToString();
        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {
        if(data=="")return null;
        string[] strs = data.Split(',');
        Queue<TreeNode> q = new Queue<TreeNode>();
        int i=0;
        TreeNode root = new TreeNode(Convert.ToInt32(strs[i++]));
        q.Enqueue(root);
        
        for(;i<strs.Length;i+=2){
            TreeNode p = q.Dequeue();
            TreeNode left = strs[i]=="\0"?null:new TreeNode(Convert.ToInt32(strs[i]));
            TreeNode right = strs[i+1]=="\0"?null:new TreeNode(Convert.ToInt32(strs[i+1]));
            p.left=left;p.right=right;
            if(left!=null)q.Enqueue(left);
            if(right!=null)q.Enqueue(right);
        }
             
        return root;
        
        
    }
    
 
}